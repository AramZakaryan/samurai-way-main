{"version":3,"file":"static/js/501.0bdba91b.chunk.js","mappings":"wKACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,yBCA1I,EAAyB,2B,mBCOZA,EAA4C,SAACC,GACxD,OACE,gBAAKC,UAAWC,EAAhB,UACE,UAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,WACE,gBACEC,IACE,mGAGHL,EAAMM,WChBf,EAA0B,yBCKbC,EAAsC,SAACP,GAClD,OACE,iBAAKC,UAAWC,EAAhB,WACE,gBACEG,IACE,mGAGHL,EAAMQ,Y,iDCAPC,GAAsBC,EAAAA,EAAAA,GAAkB,IAoBxCC,GAAsBC,EAAAA,EAAAA,GAAwB,CAAEC,KAAM,yBAAhCD,EAlBsC,SAACZ,GACjE,OACE,kBAAMc,SAAUd,EAAMe,aAAtB,WACE,0BACE,SAACC,EAAA,EAAD,CACEC,UAAWC,EAAAA,GACXZ,KAAM,iBACNa,YAAa,2BACbC,SAAU,CAACC,EAAAA,EAAuBZ,QAGtC,0BACE,mBAAQa,KAAM,SAAd,iC,wECjBFC,EAAkB,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,aAAaC,SAASF,SCDxC,IAmBA,GALuBG,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KAfsB,SAACL,GACvB,MAAO,CACLM,gBAAiBN,EAAMM,oBAIA,SAACC,GAC1B,MAAO,CACLC,WAAY,SAACC,GACXF,GAASG,EAAAA,EAAAA,GAAaD,UDFrB,SAA6BE,GAYlC,OAF2BN,EAAAA,EAAAA,IAAQN,EAARM,EAT3B,SAA8B7B,GAC5B,IAAQyB,EAAyBzB,EAAzByB,OAAWW,GAAnB,OAAiCpC,EAAjC,GAEA,OAAKyB,GAGE,SAACU,GAAD,UAAuBC,KAFrB,SAAC,KAAD,CAAUjC,GAAI,gBCEJyB,EFkBwD,SAAC5B,GAC9E,IAAIqC,EAAUrC,EAAM8B,gBAAgBQ,YAAYC,KAAI,SAACC,GAAD,OAClD,SAACzC,EAAD,CAAwBO,KAAMkC,EAAGlC,KAAMF,GAAIoC,EAAGpC,IAA7BoC,EAAGpC,OAGlBqC,EAAWzC,EAAM8B,gBAAgBY,aAAaH,KAAI,SAACI,GAAD,OACpD,SAACpC,EAAD,CAAsBC,QAASmC,EAAIC,OAArBD,EAAIvC,OAOpB,OACE,iCACE,SAACyC,EAAA,EAAD,KACA,iBAAK5C,UAAWC,EAAAA,QAAhB,WACE,gBAAKD,UAAWC,EAAAA,aAAhB,SAAiCmC,KACjC,iBAAKpC,UAAWC,EAAAA,SAAhB,UACGuC,GACD,0BACE,SAAC9B,EAAD,CAAqBG,SAZF,SAACgC,GAC5B9C,EAAMgC,WAAWc,EAAKb","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/components/Dialogs/Messages/Message.module.css?2e1f","components/Dialogs/Messages/Message.tsx","components/Dialogs/DialogsPresentational.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"dialog\":\"Dialogs_dialog__htSTl\",\"active\":\"Dialogs_active__t8cjl\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__gU34-\"};","import React from \"react\"\nimport S from \"./DialogItem.module.css\"\nimport { NavLink } from \"react-router-dom\"\n\nexport type DialogItemPropsType = {\n  name: string\n  id: number\n}\nexport const DialogItem: React.FC<DialogItemPropsType> = (props) => {\n  return (\n    <div className={S.dialog}>\n      <NavLink to={\"/dialogs/\" + props.id}>\n        <img\n          src={\n            \"https://static.fnac-static.com/multimedia/Images/FD/Comete/123455/CCP_IMG_1200x800/1608824.jpg\"\n          }\n        />\n        {props.name}\n      </NavLink>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__p2dZ8\"};","import React from \"react\"\nimport S from \"./Message.module.css\"\n\nexport type MessagePropsType = {\n  message: string\n}\nexport const Message: React.FC<MessagePropsType> = (props) => {\n  return (\n    <div className={S.message}>\n      <img\n        src={\n          \"https://static.fnac-static.com/multimedia/Images/FD/Comete/123455/CCP_IMG_1200x800/1608824.jpg\"\n        }\n      />\n      {props.message}\n    </div>\n  )\n}\n","import React from \"react\"\nimport S from \"./Dialogs.module.css\"\nimport { DialogItem } from \"./DialogItem/DialogItem\"\nimport { Message } from \"./Messages/Message\"\nimport { Sidebar } from \"../Sidebar/Sidebar\"\nimport { DialogsPageDataType } from \"redux/types\"\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\"\nimport { validateMaxLength, validateRequiredField } from \"utils/validators/validators\"\nimport { CustomTextarea } from \"components/FormControls/CustomFields\"\n\ntype FormDatatype = {\n  newMessageBody: string\n}\n\nconst validateMaxLength10 = validateMaxLength(10)\n\nconst AddMessageForm: React.FC<InjectedFormProps<FormDatatype>> = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field\n          component={CustomTextarea}\n          name={\"newMessageBody\"}\n          placeholder={\"Enter your message here!\"}\n          validate={[validateRequiredField, validateMaxLength10]}\n        />\n      </div>\n      <div>\n        <button type={\"submit\"}>Add Message</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddMessageReduxForm = reduxForm<FormDatatype>({ form: \"dialogsAddMessageForm\" })(\n  AddMessageForm,\n)\n\nexport type DialogsPresentationalPropsType = {\n  dialogsPageData: DialogsPageDataType\n  isAuth: boolean\n  addMessage: (newMessageBody: string) => void\n}\n\nexport const DialogsPresentational: React.FC<DialogsPresentationalPropsType> = (props) => {\n  let dialogs = props.dialogsPageData.dialogsData.map((el) => (\n    <DialogItem key={el.id} name={el.name} id={el.id} />\n  ))\n\n  let messages = props.dialogsPageData.messagesData.map((msg) => (\n    <Message key={msg.id} message={msg.title} />\n  ))\n\n  const addNewMessageHandler = (data: FormDatatype) => {\n    props.addMessage(data.newMessageBody)\n  }\n\n  return (\n    <>\n      <Sidebar />\n      <div className={S.dialogs}>\n        <div className={S.dialogsItems}>{dialogs}</div>\n        <div className={S.messages}>\n          {messages}\n          <div>\n            <AddMessageReduxForm onSubmit={addNewMessageHandler} />\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n","import React from \"react\"\nimport { Redirect } from \"react-router-dom\"\nimport { connect } from \"react-redux\"\nimport { stateReduxType } from \"../redux/storeRedux\"\n\ntype mapStateToPropsType = {\n  isAuth: boolean\n}\n\ntype lala = mapStateToPropsType\n\nconst mapStateToProps = (state: stateReduxType): mapStateToPropsType => {\n  return {\n    isAuth: state.authPartData.authData.isAuth,\n  }\n}\n\n/** (Aram) Wrapper HOC which redirects to Login page if the user is not authorised\n */\nexport function withAuthRedirect<T>(InitialComponent: React.ComponentType<T>) {\n  function TransformerComponent(props: mapStateToPropsType) {\n    const { isAuth, ...restProps } = props\n    // console.log(props)\n    if (!isAuth) {\n      return <Redirect to={\"/Login\"} />\n    }\n    return <InitialComponent {...(restProps as T)} />\n  }\n\n  const ConnectedComponent = connect(mapStateToProps)(TransformerComponent)\n\n  return ConnectedComponent\n\n  // Structure\n  // InitialComponent >>>\n  //    TransformerComponent >>>\n  //       ConnectedComponent\n}\n\n// // version with class component inside\n\n// export const withAuthRedirect = (InitialComponent: any) => {\n//\n//     class ClassComponent extends React.Component<any> {\n//         render() {\n//             if (!this.props.isAuth) {\n//                 return <Redirect to={\"/Login\"}/>\n//             }\n//             return <InitialComponent {...this.props}/>;\n//         }\n//     }\n//\n//     const mapStateToProps = (state: stateReduxType) => {\n//         return {\n//             isAuth: state.authPartData.authData.isAuth\n//         }\n//\n//     }\n//\n//     const ConnectComponent = connect(mapStateToProps)(ClassComponent)\n//\n//     return ConnectComponent\n//\n//     // Structure\n//     // InitialComponent >>>\n//     //    ClassComponent >>>\n//     //       ConnectComponent\n//\n// }\n","import { DialogsPresentational, DialogsPresentationalPropsType } from \"./DialogsPresentational\"\nimport { connect } from \"react-redux\"\nimport { compose, Dispatch } from \"redux\"\nimport React from \"react\"\nimport { stateReduxType } from \"redux/storeRedux\"\nimport { addMessageAC } from \"redux/dialogsReducer\"\nimport { withAuthRedirect } from \"hoc/WithAuthRedirect\"\n\ntype MapStateToPropsType = Pick<DialogsPresentationalPropsType, \"dialogsPageData\">\n\ntype MapDispatchToPropsType = Pick<DialogsPresentationalPropsType, \"addMessage\">\n\nconst mapStateToProps = (state: stateReduxType): MapStateToPropsType => {\n  return {\n    dialogsPageData: state.dialogsPageData,\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n  return {\n    addMessage: (newMessageBody: string) => {\n      dispatch(addMessageAC(newMessageBody))\n    },\n  }\n}\n\nconst DialogsCompose = compose<React.ComponentType>(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect,\n)(DialogsPresentational)\n\nexport default DialogsCompose\n\n/////////// General Structure\n// DialogsPresentational >>>\n//    DialogsCompose\n"],"names":["DialogItem","props","className","S","to","id","src","name","Message","message","validateMaxLength10","validateMaxLength","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","CustomTextarea","placeholder","validate","validateRequiredField","type","mapStateToProps","state","isAuth","authPartData","authData","compose","connect","dialogsPageData","dispatch","addMessage","newMessageBody","addMessageAC","InitialComponent","restProps","dialogs","dialogsData","map","el","messages","messagesData","msg","title","Sidebar","data"],"sourceRoot":""}